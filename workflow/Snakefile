import os
import pandas as pd

configfile: "config/config.yaml"
ana_home = config["ana_home"] # home directory of all analysis results
sample_table = pd.read_csv("config/sample_table.csv", index_col=0)

def log_path(file):
    return os.path.join(ana_home, "logs", "{sample}", file)
def get_raw_fq(wildcards):
    sample = wildcards.sample
    R1_path = sample_table.loc[sample, "R1_file"]
    R2_path = sample_table.loc[sample, "R2_file"]
    return {"R1":R1_path, "R2":R2_path}
rule count_reads:
    input:
        unpack(get_raw_fq)
    output:
        os.path.join(ana_home,"info","{sample}.info")
    threads: 1
    resources: 
        nodes = 1
    message:
        " ----> count_reads :{wildcards.sample} : {threads} cores"
    wrapper:
        "file:./wrappers/zhuakexi/count_reads"
rule bwa_mem:
    input:
        unpack(get_raw_fq)
    output:
        protected( os.path.join(ana_home,"sam","{sample}.aln.sam.gz"))
    params:
        index = config["ref"]["bwa"],
        extra = r"-R '@RG\tID:{sample}\tPL:ILLUMINA\tSM:{sample}'"
    threads: 
        config["cpu"]["bwa"]
    resources:
        nodes = config["cpu"]["bwa"]
    log:
        os.path.join(ana_home, "logs", "{sample}", "bwa.log")
    message:
        " ------> bwa : {wildcards.sample} : {threads} cores"
    wrapper:
        # wrapper shipped with conda yaml
        "file:./wrappers/zhuakexi/bwa_mem2"
rule sam2seg:
    input:
        rules.bwa_mem.output
    output:
        os.path.join(ana_home, "seg", "{sample}.seg.gz")
    params:
        snp = config["snp"],
        sex = config["sex"],
        snp_file = config["ref"]["snp"],
        par_file = config["ref"]["par"],
        k8 = config["software"]["k8"],
        js = config["software"]["js"],
    resources:
        nodes = 1
    log:
        log_path("sam2seg.log")
    message:
        " ------> sam2seg : {wildcards.sample} : 1 core"
    wrapper:
        "file:./wrappers/zhuakexi/sam2seg"
include: "rules/seg2pairs.smk"
include: "rules/clean_pairs.smk"
include: "rules/impute.smk"
include: "rules/sep_clean.smk"
include: "rules/build.smk"
#include: "rules/align3d.smk"
include: "rules/collect_info.smk"
rule All:
    input:
        #expand(rules.build.output, sample=pep.sample_table["sample_name"], rep=list(range(1,6))),
        #expand(rules.impute.output, sample=pep.sample_table["sample_name"]),
        #expand(rules.pairs_info.output, sample=sample_table.index),
        rules.collect_info.output